security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory:
            memory:
                users:
                    admin: { password: '$2y$13$pilyS/IbhCqITTCqAgn2Iu4yrCdqViRIEDOSo0fjQjiT5u9GYBI3y', roles: ['ROLE_VIEWER']}
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: users_in_memory
            http_basic:
                realm: My Secured Area

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
    role_hierarchy:
        ROLE_CARTOGRAPHER: [ROLE_LOCATION_INDEX, ROLE_LOCATION_NEW, ROLE_LOCATION_EDIT, ROLE_LOCATION_SHOW, ROLE_LOCATION_DELETE, ROLE_COUNTRY_INDEX, ROLE_COUNTRY_NEW, ROLE_COUNTRY_EDIT, ROLE_COUNTRY_SHOW, ROLE_COUNTRY_DELETE]
        ROLE_MEASURER: [ROLE_MEASUREMENT_INDEX, ROLE_MEASUREMENT_NEW, ROLE_MEASUREMENT_EDIT, ROLE_MEASUREMENT_SHOW, ROLE_MEASUREMENT_DELETE, ROLE_WEATHER_DESCRIPTION_INDEX, ROLE_WEATHER_DESCRIPTION_NEW, ROLE_WEATHER_DESCRIPTION_EDIT, ROLE_WEATHER_DESCRIPTION_SHOW, ROLE_WEATHER_DESCRIPTION_DELETE]
        ROLE_VIEWER: [ROLE_COUNTRY_INDEX, ROLE_COUNTRY_SHOW, ROLE_LOCATION_INDEX, ROLE_LOCATION_SHOW, ROLE_MEASUREMENT_INDEX, ROLE_MEASUREMENT_SHOW, ROLE_WEATHER_DESCRIPTION_INDEX, ROLE_WEATHER_DESCRIPTION_SHOW]
        ROLE_ADMIN: [ROLE_CARTOGRAPHER, ROLE_MEASURER]

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
